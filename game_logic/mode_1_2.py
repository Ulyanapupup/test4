import json, os

json_path = os.path.join('game_logic', 'questions_1_2.json')

with open(json_path, 'r', encoding='utf-8') as f:
    question_map = json.load(f)

possible_numbers = list(range(101))
asked_questions = set()

# –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
min_possible = 0
max_possible = 100

def reset():
    global possible_numbers, asked_questions, min_possible, max_possible
    possible_numbers = list(range(101))
    asked_questions = set()
    min_possible = 0
    max_possible = 100

def is_even(n): return n % 2 == 0
def is_odd(n): return n % 2 == 1
def is_prime(n):
    if n < 2: return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0: return False
    return True

question_functions = {
    "is_even": is_even,
    "is_odd": is_odd,
    "is_prime": is_prime
}

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
unique_questions = {
    "—á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ": is_even,
    "—á–∏—Å–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ": is_odd,
    "—á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ": is_prime
}

def next_question():
    global min_possible, max_possible

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è 1 –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —É–≥–∞–¥—ã–≤–∞–µ–º
    if len(possible_numbers) == 1:
        return f"–Ø –∑–Ω–∞—é! –≠—Ç–æ —á–∏—Å–ª–æ {possible_numbers[0]}", True

    # –°–Ω–∞—á–∞–ª–∞ ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    for q in unique_questions:
        if q not in asked_questions:
            asked_questions.add(q)
            return q, False

    # –ó–∞—Ç–µ–º ‚Äî –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    if min_possible >= max_possible:
        return "–£–ø—Å, –≤—ã –º–µ–Ω—è –∑–∞–ø—É—Ç–∞–ª–∏ üôÉ", True

    mid = (min_possible + max_possible) // 2
    question = f"–±–æ–ª—å—à–µ {mid}"
    asked_questions.add(question)
    return f"–ß–∏—Å–ª–æ {question}?", False

def process_answer(user_answer):
    global possible_numbers, min_possible, max_possible

    answer = user_answer.strip().lower()
    if answer not in ["–¥–∞", "–Ω–µ—Ç"]:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'", False

    last_question = list(asked_questions)[-1]

    if last_question in unique_questions:
        func = unique_questions[last_question]
        yes = answer == "–¥–∞"
        possible_numbers = [n for n in possible_numbers if func(n) == yes]
    elif "–±–æ–ª—å—à–µ" in last_question:
        number = int(last_question.split()[-1])
        if answer == "–¥–∞":
            min_possible = number + 1
            possible_numbers = [n for n in possible_numbers if n > number]
        else:
            max_possible = number
            possible_numbers = [n for n in possible_numbers if n <= number]

    if len(possible_numbers) == 1:
        return f"–Ø –∑–Ω–∞—é! –≠—Ç–æ —á–∏—Å–ª–æ {possible_numbers[0]}", True
    if len(possible_numbers) == 0:
        return "–í—ã, –ø–æ—Ö–æ–∂–µ, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ üôÉ", True

    return next_question()
